Sure! Here's an example of how you can create the SQL statements to create the tables and populate them with data based on the above database design:

```sql
-- Create User table
CREATE TABLE User (
  UserID INT PRIMARY KEY,
  Username VARCHAR(255),
  Password VARCHAR(255),
  Email VARCHAR(255),
  Address VARCHAR(255)
);

-- Create Category table
CREATE TABLE Category (
  CategoryID INT PRIMARY KEY,
  Name VARCHAR(255),
  Description VARCHAR(255)
);

-- Create Product table
CREATE TABLE Product (
  ProductID INT PRIMARY KEY,
  Name VARCHAR(255),
  Description VARCHAR(255),
  Price DECIMAL(10, 2),
  Quantity INT,
  CategoryID INT,
  FOREIGN KEY (CategoryID) REFERENCES Category(CategoryID)
);

-- Create Order table
CREATE TABLE Order (
  OrderID INT PRIMARY KEY,
  UserID INT,
  OrderDate DATE,
  Status VARCHAR(255),
  TotalAmount DECIMAL(10, 2),
  FOREIGN KEY (UserID) REFERENCES User(UserID)
);

-- Create OrderItem table
CREATE TABLE OrderItem (
  OrderItemID INT PRIMARY KEY,
  OrderID INT,
  ProductID INT,
  Quantity INT,
  Price DECIMAL(10, 2),
  FOREIGN KEY (OrderID) REFERENCES Order(OrderID),
  FOREIGN KEY (ProductID) REFERENCES Product(ProductID)
);

-- Create Payment table
CREATE TABLE Payment (
  PaymentID INT PRIMARY KEY,
  OrderID INT,
  PaymentMethod VARCHAR(255),
  TransactionDetails VARCHAR(255),
  FOREIGN KEY (OrderID) REFERENCES Order(OrderID)
);

-- Insert sample data into User table
INSERT INTO User (UserID, Username, Password, Email, Address)
VALUES
  (1, 'johndoe', 'password', 'john@example.com', '123 Main Street'),
  (2, 'janedoe', 'password', 'jane@example.com', '456 Elm Avenue');

-- Insert sample data into Category table
INSERT INTO Category (CategoryID, Name, Description)
VALUES
  (1, 'Clothing', 'Apparel for men and women'),
  (2, 'Footwear', 'Shoes for men and women');

-- Insert sample data into Product table
INSERT INTO Product (ProductID, Name, Description, Price, Quantity, CategoryID)
VALUES
  (1, 'T-shirt', 'High-quality cotton t-shirt', 19.99, 50, 1),
  (2, 'Jeans', 'Denim jeans for men', 39.99, 30, 1),
  (3, 'Sneakers', 'Classic white sneakers', 29.99, 20, 2);

-- Insert sample data into Order table
INSERT INTO Order (OrderID, UserID, OrderDate, Status, TotalAmount)
VALUES
  (1, 1, '2023-07-10', 'Shipped', 59.98),
  (2, 2, '2023-07-12', 'Pending', 39.99);

-- Insert sample data into OrderItem table
INSERT INTO OrderItem (OrderItemID, OrderID, ProductID, Quantity, Price)
VALUES
  (1, 1, 1, 2, 19.99),
  (2, 1, 2, 1, 39.99),
  (3, 2, 3, 1, 29.99);

-- Insert sample data into Payment table
INSERT INTO Payment (PaymentID, OrderID, PaymentMethod, TransactionDetails)
VALUES
  (1, 1, 'Credit Card', 'xxxxxxxxxxxx1234'),
  (2, 2, 'PayPal', 'jane@example.com - 2023-07');
```

Please note that the syntax and specific data types used may vary depending on the database management system you are using. Make sure to adjust the statements accordingly if needed.

To retrieve orders for a specific user from the database, you can use a SQL query with a WHERE clause to filter the orders based on the user ID. Here's an example of the SQL query to retrieve orders for a specific user:

```sql
SELECT *
FROM Order
WHERE UserID = {specific_user_id};
```

In the above query, replace `{specific_user_id}` with the actual user ID you want to retrieve orders for. This query will fetch all the orders from the `Order` table where the `UserID` matches the specified user ID.

If you also want to include additional information about the user and the associated order items, you can join the relevant tables. Here's an example of an extended query:

```sql
SELECT Order.OrderID, Order.OrderDate, Order.Status, Order.TotalAmount,
       User.Username, User.Email,
       OrderItem.ProductID, OrderItem.Quantity, OrderItem.Price
FROM Order
JOIN User ON Order.UserID = User.UserID
JOIN OrderItem ON Order.OrderID = OrderItem.OrderID
WHERE User.UserID = {specific_user_id};
```

This query joins the `Order` table with the `User` and `OrderItem` tables using the appropriate foreign key relationships. It retrieves the order details, including the order ID, order date, status, total amount, along with the associated user's username and email, and the product details for each order item. Replace `{specific_user_id}` with the desired user ID.

Note: Ensure that you use appropriate table and column names based on your specific database schema.